https://www.geeksforgeeks.org/boyer-moore-majority-voting-algorithm/

The Boyer-Moore voting algorithm is one of the popular optimal algorithms which is used to find the majority element among the given elements that have more than N/ 2 occurrences. This works perfectly fine for finding the majority element which takes 2 traversals over the given elements, which works in O(N) time complexity and O(1) space complexity.

O(N) time
O(1) space

As we ptogress through the array. we calc the majority element until i each time. counter becomes 0 means theres equal number of all elements. whenever we find an opposing element(which is not majority) our probabilty of the majority element being the majority element decreaees by 1, so we decrement, otherwise increment.

https://leetcode.com/problems/majority-element/


class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int counter = 0, majority;
        for (int num : nums) {
            if (!counter) {
                majority = num;
            }
            counter += num == majority ? 1 : -1;
        }
        return majority;
    }
};

